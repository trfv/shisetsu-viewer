/* eslint-disable */
import * as types from "./graphql";
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
  "query institutionDetail($id: uuid!) {\n  institutions_by_pk(id: $id) {\n    id\n    prefecture\n    municipality\n    building\n    institution\n    capacity\n    area\n    fee_divisions\n    weekday_usage_fee\n    holiday_usage_fee\n    address\n    is_available_strings\n    is_available_woodwind\n    is_available_brass\n    is_available_percussion\n    is_equipped_music_stand\n    is_equipped_piano\n    website_url\n    layout_image_url\n    lottery_period\n    note\n  }\n}": typeof types.InstitutionDetailDocument;
  "query institutionReservations($id: uuid!, $startDate: date, $endDate: date) {\n  reservations(\n    where: {institution_id: {_eq: $id}, date: {_gte: $startDate, _lte: $endDate}}\n    order_by: {date: asc}\n  ) {\n    id\n    date\n    reservation\n    updated_at\n  }\n}": typeof types.InstitutionReservationsDocument;
  "query institutions($offset: Int, $limit: Int, $municipality: [String!], $isAvailableStrings: availavility_division = null, $isAvailableWoodwind: availavility_division = null, $isAvailableBrass: availavility_division = null, $isAvailablePercussion: availavility_division = null, $institutionSizes: [String!] = null) {\n  institutions(\n    offset: $offset\n    limit: $limit\n    where: {municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}\n    order_by: {municipality: asc, building_kana: asc, institution_kana: asc}\n  ) {\n    id\n    municipality\n    building\n    institution\n    institution_size\n    is_available_strings\n    is_available_woodwind\n    is_available_brass\n    is_available_percussion\n    is_equipped_music_stand\n    is_equipped_piano\n    updated_at\n  }\n  institutions_aggregate(\n    where: {municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.InstitutionsDocument;
  "query reservations($offset: Int, $limit: Int, $prefecture: prefecture = null, $municipality: [String!], $isAvailableStrings: availavility_division = null, $isAvailableWoodwind: availavility_division = null, $isAvailableBrass: availavility_division = null, $isAvailablePercussion: availavility_division = null, $institutionSizes: [String!] = null, $startDate: date, $endDate: date, $isHoliday: Boolean, $reservationStatus1: jsonb = null, $reservationStatus2: jsonb = null, $reservationStatus3: jsonb = null, $reservationStatus4: jsonb = null) {\n  reservations(\n    offset: $offset\n    limit: $limit\n    where: {_and: {institution: {prefecture: {_eq: $prefecture}, municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}, date: {_gte: $startDate, _lte: $endDate}, is_holiday: {_eq: $isHoliday}}, _or: [{reservation: {_contains: $reservationStatus1}}, {reservation: {_contains: $reservationStatus2}}, {reservation: {_contains: $reservationStatus3}}, {reservation: {_contains: $reservationStatus4}}]}\n    order_by: {date: asc}\n  ) {\n    id\n    date\n    reservation\n    updated_at\n    institution {\n      id\n      municipality\n      building\n      institution\n      institution_size\n    }\n  }\n  reservations_aggregate(\n    where: {_and: {institution: {prefecture: {_eq: $prefecture}, municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}, date: {_gte: $startDate, _lte: $endDate}, is_holiday: {_eq: $isHoliday}}, _or: [{reservation: {_contains: $reservationStatus1}}, {reservation: {_contains: $reservationStatus2}}, {reservation: {_contains: $reservationStatus3}}, {reservation: {_contains: $reservationStatus4}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}": typeof types.ReservationsDocument;
};
const documents: Documents = {
  "query institutionDetail($id: uuid!) {\n  institutions_by_pk(id: $id) {\n    id\n    prefecture\n    municipality\n    building\n    institution\n    capacity\n    area\n    fee_divisions\n    weekday_usage_fee\n    holiday_usage_fee\n    address\n    is_available_strings\n    is_available_woodwind\n    is_available_brass\n    is_available_percussion\n    is_equipped_music_stand\n    is_equipped_piano\n    website_url\n    layout_image_url\n    lottery_period\n    note\n  }\n}":
    types.InstitutionDetailDocument,
  "query institutionReservations($id: uuid!, $startDate: date, $endDate: date) {\n  reservations(\n    where: {institution_id: {_eq: $id}, date: {_gte: $startDate, _lte: $endDate}}\n    order_by: {date: asc}\n  ) {\n    id\n    date\n    reservation\n    updated_at\n  }\n}":
    types.InstitutionReservationsDocument,
  "query institutions($offset: Int, $limit: Int, $municipality: [String!], $isAvailableStrings: availavility_division = null, $isAvailableWoodwind: availavility_division = null, $isAvailableBrass: availavility_division = null, $isAvailablePercussion: availavility_division = null, $institutionSizes: [String!] = null) {\n  institutions(\n    offset: $offset\n    limit: $limit\n    where: {municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}\n    order_by: {municipality: asc, building_kana: asc, institution_kana: asc}\n  ) {\n    id\n    municipality\n    building\n    institution\n    institution_size\n    is_available_strings\n    is_available_woodwind\n    is_available_brass\n    is_available_percussion\n    is_equipped_music_stand\n    is_equipped_piano\n    updated_at\n  }\n  institutions_aggregate(\n    where: {municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}":
    types.InstitutionsDocument,
  "query reservations($offset: Int, $limit: Int, $prefecture: prefecture = null, $municipality: [String!], $isAvailableStrings: availavility_division = null, $isAvailableWoodwind: availavility_division = null, $isAvailableBrass: availavility_division = null, $isAvailablePercussion: availavility_division = null, $institutionSizes: [String!] = null, $startDate: date, $endDate: date, $isHoliday: Boolean, $reservationStatus1: jsonb = null, $reservationStatus2: jsonb = null, $reservationStatus3: jsonb = null, $reservationStatus4: jsonb = null) {\n  reservations(\n    offset: $offset\n    limit: $limit\n    where: {_and: {institution: {prefecture: {_eq: $prefecture}, municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}, date: {_gte: $startDate, _lte: $endDate}, is_holiday: {_eq: $isHoliday}}, _or: [{reservation: {_contains: $reservationStatus1}}, {reservation: {_contains: $reservationStatus2}}, {reservation: {_contains: $reservationStatus3}}, {reservation: {_contains: $reservationStatus4}}]}\n    order_by: {date: asc}\n  ) {\n    id\n    date\n    reservation\n    updated_at\n    institution {\n      id\n      municipality\n      building\n      institution\n      institution_size\n    }\n  }\n  reservations_aggregate(\n    where: {_and: {institution: {prefecture: {_eq: $prefecture}, municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}, date: {_gte: $startDate, _lte: $endDate}, is_holiday: {_eq: $isHoliday}}, _or: [{reservation: {_contains: $reservationStatus1}}, {reservation: {_contains: $reservationStatus2}}, {reservation: {_contains: $reservationStatus3}}, {reservation: {_contains: $reservationStatus4}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}":
    types.ReservationsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query institutionDetail($id: uuid!) {\n  institutions_by_pk(id: $id) {\n    id\n    prefecture\n    municipality\n    building\n    institution\n    capacity\n    area\n    fee_divisions\n    weekday_usage_fee\n    holiday_usage_fee\n    address\n    is_available_strings\n    is_available_woodwind\n    is_available_brass\n    is_available_percussion\n    is_equipped_music_stand\n    is_equipped_piano\n    website_url\n    layout_image_url\n    lottery_period\n    note\n  }\n}"
): (typeof documents)["query institutionDetail($id: uuid!) {\n  institutions_by_pk(id: $id) {\n    id\n    prefecture\n    municipality\n    building\n    institution\n    capacity\n    area\n    fee_divisions\n    weekday_usage_fee\n    holiday_usage_fee\n    address\n    is_available_strings\n    is_available_woodwind\n    is_available_brass\n    is_available_percussion\n    is_equipped_music_stand\n    is_equipped_piano\n    website_url\n    layout_image_url\n    lottery_period\n    note\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query institutionReservations($id: uuid!, $startDate: date, $endDate: date) {\n  reservations(\n    where: {institution_id: {_eq: $id}, date: {_gte: $startDate, _lte: $endDate}}\n    order_by: {date: asc}\n  ) {\n    id\n    date\n    reservation\n    updated_at\n  }\n}"
): (typeof documents)["query institutionReservations($id: uuid!, $startDate: date, $endDate: date) {\n  reservations(\n    where: {institution_id: {_eq: $id}, date: {_gte: $startDate, _lte: $endDate}}\n    order_by: {date: asc}\n  ) {\n    id\n    date\n    reservation\n    updated_at\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query institutions($offset: Int, $limit: Int, $municipality: [String!], $isAvailableStrings: availavility_division = null, $isAvailableWoodwind: availavility_division = null, $isAvailableBrass: availavility_division = null, $isAvailablePercussion: availavility_division = null, $institutionSizes: [String!] = null) {\n  institutions(\n    offset: $offset\n    limit: $limit\n    where: {municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}\n    order_by: {municipality: asc, building_kana: asc, institution_kana: asc}\n  ) {\n    id\n    municipality\n    building\n    institution\n    institution_size\n    is_available_strings\n    is_available_woodwind\n    is_available_brass\n    is_available_percussion\n    is_equipped_music_stand\n    is_equipped_piano\n    updated_at\n  }\n  institutions_aggregate(\n    where: {municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"
): (typeof documents)["query institutions($offset: Int, $limit: Int, $municipality: [String!], $isAvailableStrings: availavility_division = null, $isAvailableWoodwind: availavility_division = null, $isAvailableBrass: availavility_division = null, $isAvailablePercussion: availavility_division = null, $institutionSizes: [String!] = null) {\n  institutions(\n    offset: $offset\n    limit: $limit\n    where: {municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}\n    order_by: {municipality: asc, building_kana: asc, institution_kana: asc}\n  ) {\n    id\n    municipality\n    building\n    institution\n    institution_size\n    is_available_strings\n    is_available_woodwind\n    is_available_brass\n    is_available_percussion\n    is_equipped_music_stand\n    is_equipped_piano\n    updated_at\n  }\n  institutions_aggregate(\n    where: {municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: "query reservations($offset: Int, $limit: Int, $prefecture: prefecture = null, $municipality: [String!], $isAvailableStrings: availavility_division = null, $isAvailableWoodwind: availavility_division = null, $isAvailableBrass: availavility_division = null, $isAvailablePercussion: availavility_division = null, $institutionSizes: [String!] = null, $startDate: date, $endDate: date, $isHoliday: Boolean, $reservationStatus1: jsonb = null, $reservationStatus2: jsonb = null, $reservationStatus3: jsonb = null, $reservationStatus4: jsonb = null) {\n  reservations(\n    offset: $offset\n    limit: $limit\n    where: {_and: {institution: {prefecture: {_eq: $prefecture}, municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}, date: {_gte: $startDate, _lte: $endDate}, is_holiday: {_eq: $isHoliday}}, _or: [{reservation: {_contains: $reservationStatus1}}, {reservation: {_contains: $reservationStatus2}}, {reservation: {_contains: $reservationStatus3}}, {reservation: {_contains: $reservationStatus4}}]}\n    order_by: {date: asc}\n  ) {\n    id\n    date\n    reservation\n    updated_at\n    institution {\n      id\n      municipality\n      building\n      institution\n      institution_size\n    }\n  }\n  reservations_aggregate(\n    where: {_and: {institution: {prefecture: {_eq: $prefecture}, municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}, date: {_gte: $startDate, _lte: $endDate}, is_holiday: {_eq: $isHoliday}}, _or: [{reservation: {_contains: $reservationStatus1}}, {reservation: {_contains: $reservationStatus2}}, {reservation: {_contains: $reservationStatus3}}, {reservation: {_contains: $reservationStatus4}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"
): (typeof documents)["query reservations($offset: Int, $limit: Int, $prefecture: prefecture = null, $municipality: [String!], $isAvailableStrings: availavility_division = null, $isAvailableWoodwind: availavility_division = null, $isAvailableBrass: availavility_division = null, $isAvailablePercussion: availavility_division = null, $institutionSizes: [String!] = null, $startDate: date, $endDate: date, $isHoliday: Boolean, $reservationStatus1: jsonb = null, $reservationStatus2: jsonb = null, $reservationStatus3: jsonb = null, $reservationStatus4: jsonb = null) {\n  reservations(\n    offset: $offset\n    limit: $limit\n    where: {_and: {institution: {prefecture: {_eq: $prefecture}, municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}, date: {_gte: $startDate, _lte: $endDate}, is_holiday: {_eq: $isHoliday}}, _or: [{reservation: {_contains: $reservationStatus1}}, {reservation: {_contains: $reservationStatus2}}, {reservation: {_contains: $reservationStatus3}}, {reservation: {_contains: $reservationStatus4}}]}\n    order_by: {date: asc}\n  ) {\n    id\n    date\n    reservation\n    updated_at\n    institution {\n      id\n      municipality\n      building\n      institution\n      institution_size\n    }\n  }\n  reservations_aggregate(\n    where: {_and: {institution: {prefecture: {_eq: $prefecture}, municipality: {_in: $municipality}, is_available_strings: {_eq: $isAvailableStrings}, is_available_woodwind: {_eq: $isAvailableWoodwind}, is_available_brass: {_eq: $isAvailableBrass}, is_available_percussion: {_eq: $isAvailablePercussion}, institution_size: {_in: $institutionSizes}}, date: {_gte: $startDate, _lte: $endDate}, is_holiday: {_eq: $isHoliday}}, _or: [{reservation: {_contains: $reservationStatus1}}, {reservation: {_contains: $reservationStatus2}}, {reservation: {_contains: $reservationStatus3}}, {reservation: {_contains: $reservationStatus4}}]}\n  ) {\n    aggregate {\n      count\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
