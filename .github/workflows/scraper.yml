permissions:
  contents: read
name: Run Scraper

on:
  workflow_dispatch:
    inputs:
      municipality:
        description: "Municipality to scrape"
        required: true
        type: choice
        options:
          - tokyo-koutou
          - tokyo-arakawa
          - tokyo-kita
          - tokyo-chuo
          - tokyo-sumida
          - kanagawa-kawasaki
          - all
  schedule:
    - cron: "0 4,16 * * *"

jobs:
  prepare:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    outputs:
      municipality: ${{ steps.set-matrix.outputs.municipality }}
      shardIndex: ${{ steps.set-matrix.outputs.shardIndex }}
      shardTotal: ${{ steps.set-matrix.outputs.shardTotal }}
      nodeModulesCacheKey: ${{ steps.set-cache-keys.outputs.nodeModulesCacheKey }}
      playwrightCacheKey: ${{ steps.set-cache-keys.outputs.playwrightCacheKey }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.municipality }}" != "all" ]; then
            echo "municipality=${{ github.event.inputs.municipality }}" >> $GITHUB_OUTPUT
            echo "shardIndex=[$(seq -s ',' 1 20)]" >> $GITHUB_OUTPUT
            echo "shardTotal=[20]" >> $GITHUB_OUTPUT
          else
            echo "shardIndex=[$(seq -s ',' 1 100)]" >> $GITHUB_OUTPUT
            echo "shardTotal=[100]" >> $GITHUB_OUTPUT
          fi
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set cache keys
        id: set-cache-keys
        run: |
          NODE_MODULES_HASH=$(sha256sum package-lock.json | awk '{ print $1 }')
          echo "nodeModulesCacheKey=${{ runner.os }}-node-modules-${NODE_MODULES_HASH}" >> $GITHUB_OUTPUT
          echo "playwrightCacheKey=${{ runner.os }}-playwright-${NODE_MODULES_HASH}" >> $GITHUB_OUTPUT
      - name: Set Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
          node-version: "lts/*"
      - name: Cache node_modules
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        id: node-modules-cache
        with:
          path: "**/node_modules"
          key: ${{ steps.set-cache-keys.outputs.nodeModulesCacheKey }}
      - name: Run npm ci
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: |
          npm ci --ignore-scripts
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium
      - name: Cache Playwright browsers
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ steps.set-cache-keys.outputs.playwrightCacheKey }}

  scrape:
    name: Scrape (${{ matrix.shardIndex }}, ${{ matrix.shardTotal }})
    needs: prepare
    timeout-minutes: 60
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        shardIndex: ${{ fromJson(needs.prepare.outputs.shardIndex) }}
        shardTotal: ${{ fromJson(needs.prepare.outputs.shardTotal) }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Start Scraper
        uses: ./.github/actions/scrape
        env:
          GRAPHQL_ENDPOINT: ${{ secrets.GRAPHQL_ENDPOINT }}
          ADMIN_SECRET: ${{ secrets.ADMIN_SECRET }}
        with:
          municipality: ${{ needs.prepare.outputs.municipality }}
          shardIndex: ${{ matrix.shardIndex }}
          shardTotal: ${{ matrix.shardTotal }}
          nodeModulesCacheKey: ${{ needs.prepare.outputs.nodeModulesCacheKey }}
          playwrightCacheKey: ${{ needs.prepare.outputs.playwrightCacheKey }}
          debug: "false"

  prepare_retry:
    runs-on: ubuntu-latest
    needs: scrape
    if: ${{ !cancelled() }}
    outputs:
      failedShards: ${{ steps.collect-failures.outputs.failedShards }}
    steps:
      - name: Collect failed shards
        id: collect-failures
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const jobs = await github.paginate(github.rest.actions.listJobsForWorkflowRun, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId,
                per_page: 100,
              });
              console.log(`Found ${jobs.length} total jobs via pagination.`);
              const failedShards = jobs
                .filter((job) => job.name.startsWith('Scrape') && job.conclusion === 'failure')
                .map((job) => job.name.match(/Scrape \((\d+),\s(\d+)\)/).slice(1))
                .filter((arr) => arr.length === 2)
                .map((arr) => ({ shardIndex: arr[0], shardTotal: arr[1] }));
              console.log(`Failed shards: ${JSON.stringify(failedShards)}`);
              core.setOutput('failedShards', JSON.stringify(failedShards));
            } catch (error) {
              core.setFailed(`Failed to fetch jobs or process results: ${error.message}`);
              core.setOutput('failedShards', '[]');
            }

  retry_scrape:
    name: Retry Scrape (${{ matrix.shardIndex }}, ${{ matrix.shardTotal }})
    needs:
      - prepare
      - prepare_retry
    if: needs.prepare_retry.outputs.failedShards != '[]'
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJson(needs.prepare_retry.outputs.failedShards)}}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Start Scraper
        uses: ./.github/actions/scrape
        env:
          GRAPHQL_ENDPOINT: ${{ secrets.GRAPHQL_ENDPOINT }}
          ADMIN_SECRET: ${{ secrets.ADMIN_SECRET }}
        with:
          municipality: ${{ needs.prepare.outputs.municipality }}
          shardIndex: ${{ matrix.shardIndex }}
          shardTotal: ${{ matrix.shardTotal }}
          nodeModulesCacheKey: ${{ needs.prepare.outputs.nodeModulesCacheKey }}
          playwrightCacheKey: ${{ needs.prepare.outputs.playwrightCacheKey }}
          debug: "true"
